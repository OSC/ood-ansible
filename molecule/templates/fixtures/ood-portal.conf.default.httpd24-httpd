# Ansible managed: Do NOT edit this file manually!



# The Open OnDemand portal VirtualHost
#
<VirtualHost *:80>
  ServerName localhost

  ErrorLog  "/var/log/httpd24/localhost_error.log"
  CustomLog "/var/log/httpd24/localhost_access.log" combined

  RewriteEngine On
  RewriteCond %{HTTP_HOST} !^(localhost(:80)?)?$ [NC]
  RewriteRule ^(.*) http://localhost:80$1 [R=301,NE,L]

  # Support maintenance page during outages of OnDemand
  RewriteEngine On
  RewriteCond /var/www/ood/public/maintenance/index.html -f
  RewriteCond /etc/ood/maintenance.enable -f
  RewriteCond %{REQUEST_URI} !/public/maintenance/.*$
  RewriteRule ^.*$ /public/maintenance/index.html [R=503,L]
  ErrorDocument 503 /public/maintenance/index.html
  Header Set Cache-Control "max-age=0, no-store"

  Header always set Content-Security-Policy "frame-ancestors http://localhost;"



  # Lua configuration
  #
  LuaRoot "/opt/ood/mod_ood_proxy/lib"

  LogLevel lua_module:info

  # Log authenticated user requests (requires min log level: info)
  LuaHookLog logger.lua logger

  # Authenticated-user to system-user mapping configuration
  #
  SetEnv OOD_USER_MAP_MATCH ".*"

  # Per-user Nginx (PUN) configuration
  # NB: Apache will need sudo privs to control the PUNs
  #
  SetEnv OOD_PUN_STAGE_CMD "sudo /opt/ood/nginx_stage/sbin/nginx_stage"


  #
  # Below is used for sub-uri's this Open OnDemand portal supports
  #

  # Serve up publicly available assets from local file system:
  #     http://localhost:80/public/favicon.ico
  #     will be redirected to the file => /var/www/ood/public/favicon.ico
  Alias "/public" "/var/www/ood/public"
  <Directory "/var/www/ood/public">
    Options Indexes FollowSymLinks
    AllowOverride None
    Require all granted
  </Directory>



  # Reverse proxy traffic to backend PUNs through Unix domain sockets:
  #
  #     http://localhost:80/pun/dev/app/simulations/1
  #     #=> unix:/path/to/socket|http://localhost/pun/dev/app/simulations/1
  #
  SetEnv OOD_PUN_URI "/pun"
  <Location "/pun">
    AuthType Basic
    AuthName "private"
    AuthUserFile "/opt/rh/httpd24/root/etc/httpd/.htpasswd"
    RequestHeader unset Authorization
    Require valid-user

    ProxyPassReverse "http://localhost/pun"

    # ProxyPassReverseCookieDomain implementation (strip domain)
    Header edit* Set-Cookie ";\s*(?i)Domain[^;]*" ""

    # ProxyPassReverseCookiePath implementation (less restrictive)
    Header edit* Set-Cookie ";\s*(?i)Path\s*=(?-i)(?!\s*/pun)[^;]*" "; Path=/pun"

    SetEnv OOD_PUN_SOCKET_ROOT "/var/run/ondemand-nginx"
    SetEnv OOD_PUN_MAX_RETRIES "5"
    LuaHookFixups pun_proxy.lua pun_proxy_handler

  </Location>

  # Control backend PUN for authenticated user:
  # NB: See mod_ood_proxy for more details.
  #
  #    http://localhost:80/nginx/stop
  #    #=> stops the authenticated user's PUN
  #
  SetEnv OOD_NGINX_URI "/nginx"
  <Location "/nginx">
    AuthType Basic
    AuthName "private"
    AuthUserFile "/opt/rh/httpd24/root/etc/httpd/.htpasswd"
    RequestHeader unset Authorization
    Require valid-user
  
    LuaHookFixups nginx.lua nginx_handler
  </Location>

  # Redirect root URI to specified URI
  #
  #     http://localhost:80/
  #     #=> http://localhost:80/pun/sys/dashboard
  #
  RedirectMatch ^/$ "/pun/sys/dashboard"

  # Redirect logout URI to specified redirect URI
  #
  #     http://localhost:80/logout
  #     #=> http://localhost:80/pun/sys/dashboard/logout
  #
  Redirect "/logout" "/pun/sys/dashboard/logout"



</VirtualHost>
