---
ood_source_repo: "https://github.com/OSC/ondemand.git"
ood_source_version: "v1.8.20"
ood_build_dir: "/tmp/ood-build"
ood_source_dir: "{{ ood_build_dir }}/ondemand"

ood_base_apache_dir: "/var/www/ood"
ood_base_dir: "/opt/ood"
ood_base_conf_dir: "/etc/ood/config"
ood_app_dir: "{{ ood_base_apache_dir }}/apps"
ood_sys_app_dir: "{{ ood_app_dir }}/sys"
ood_dev_app_dir: "{{ ood_app_dir }}/dev"
ood_usr_app_dir: "{{ ood_app_dir }}/usr"

ood_base_apps:
- activejobs
- bc_desktop
- dashboard
- file-editor
- files
- myjobs
- shell

ood_core_libs:
- mod_ood_proxy
- nginx_stage
- ood-portal-generator
- ood_auth_map

## Manage cluster example, default undef
# cluster:
#   v2:
#     metadata:
#       title: my_cluster
#     login:
#       host: my_host
#     job:
#       adapter: slurm
#       bin: /usr/local
#     batch_connect:
#
## Apps install example, default undef
# ood_install_apps:
#   jupyter:
#     repo: https://github.com/OSC/bc_example_jupyter.git
#     dest: {{ ood_sys_app_dir }}  # default creates
#     version: master        # default
#     umask: '022' # default,File=rw-r-r,Dir=rwx-rx-rx
#   customdir: # will create /var/www/ood/apps/my/dir/customdir
#     repo: https://github.com/OSC/bc_example_jupyter.git
#     dest: /var/www/ood/apps/my/dir
#     version: v1.0.1
#     umask: '002'
#
## Apps config example, default undef
# ood_apps:
#   bc_desktop:
#     title: "remote desktop"
#     cluster: my_cluster
#     attributes:
#       desktop: xfce
#     submit:
#       script:
#         native:
#           - "<%= bc_num_slots.blank? ? 1 : bc_num_slots.to_i %>"
#           - "1"
#   files:
#     env:
#       ood_shell: /bin/bash
#   dashboard:
#     env:
#       motd_format: markdown
#

passenger_version: "6.0.4"
nginx_version: "1.17.3"
nodejs_version: "10.x"
passenger_tar: "passenger-{{ passenger_version }}.tar.gz"
nginx_tar: "nginx-{{ nginx_version }}-x86_64-linux.tar.gz"
agent_tar: "agent-x86_64-linux.tar.gz"

passenger_base_url: "https://github.com/phusion/passenger/releases/download"
passenger_release_url: "{{ passenger_base_url }}/release-{{ passenger_version }}"

passenger_url: "{{ passenger_release_url }}/{{ passenger_tar }}"
passenger_nginx_url: "{{ passenger_release_url }}/{{ nginx_tar }}"
passenger_agent_url: "{{ passenger_release_url }}/{{ agent_tar }}"

# override when you've built/packaged your own
passenger_remote_dl: true
passenger_src_dir: "{{ ood_build_dir }}/passenger-src"
passenger_lib_dir: "{{ ood_base_dir }}/passenger-lib"
passenger_support_binaries_dir: "{{ passenger_lib_dir }}/support-binaries"
passenger_base_dir: "{{ ood_base_dir }}/passenger"

ood_portal_generator: true

ruby_lib_dir: "/usr/lib64/ruby/"

######## START install from rpm related configs ############
# flip this flag to instead install from source
install_from_src: false
rpm_repo_url: "https://yum.osc.edu/ondemand/2.0/ondemand-release-web-2.0-1.noarch.rpm"
rpm_repo_key: "https://yum.osc.edu/ondemand/RPM-GPG-KEY-ondemand"
# OSC's repo rpm isn't signed
disable_gpg_check_rpm_repo: true
install_ondemand_dex: false
ondemand_dex_package: ondemand-dex
######## END install from rpm related configs ############


######## START nginx_stage.yml related configs ############
pun_custom_env_declarations: []
# pun_custom_env is undefined by default

# user_regex: '[\w@\.\-]+'
# nginx_min_uid: 500
nginx_lib_dir: "/var/lib/ondemand-nginx"
nginx_config_dir: "{{ nginx_lib_dir }}/config"
nginx_puns_dir: "{{ nginx_config_dir }}/puns"
nginx_apps_dir: "{{ nginx_config_dir }}/apps"
nginx_dir: "{{ ood_base_dir }}/nginx"
nginx_bin: "{{ nginx_dir }}/bin/nginx"
nginx_mime_types: "{{ nginx_dir }}/conf/mime.types"
nginx_file_upload_max: 10737420000
locations_ini: "{{ passenger_lib_dir }}/locations.ini"
######## END nginx_stage.yml related configs ############


######## START default OS related configs ############
# OS defaults are RHEL
apache_service_enabled: true
apache_package_name: httpd
apache_service_name: httpd
apache_user: apache
apache_etc_dir: "/etc/{{ apache_service_name }}"
apache_conf_dir: "{{ apache_etc_dir }}/conf.d"
apache_log_dir: "/var/log/{{ apache_service_name }}"

g_plus_plus: g++
sqlite_devel_package: sqlite-devel
ruby_devel_package: ruby-devel
ffi_devel_package: libffi-devel
libz_devel_package: zlib-devel
######## END default OS related configs ############


######## START Apache and ood_portal.yml configs ############

# Use this variable to define anything you need inside ood VirtualHost that
# isn't already there.
# Tip: Could be multi-line yml with | or >, so you could add new Location
# directives or a whole lot more.
#
# httpd_extra:

# httpd_listen_addr_port:
# - 80
# - 443

httpd_use_rewrites: true
maintenance_ip_whitelist: []
use_maintenance: true
# security_csp_frame_ancestors:
# security_strict_transport:

servername: localhost
# proxy_server:
httpd_port: 80

# ssl_cert: "/etc/pki/tls/certs/www.example.com.crt"
# ssl_cert_key: "/etc/pki/tls/certs/www.example.com.key"
# ssl_cert_chain: "/etc/pki/tls/certs/www.example.com.chain"

# ssl:
# - "SSLCertificateFile {{ ssl_cert }}"
# - "SSLCertificateKeyFile {{ ssl_cert_key }}"
# - "SSLCertificateChainFile {{ ssl_cert_chain }}"

httpd_auth:
- AuthType Basic
- AuthName "private"
- AuthUserFile "{{ apache_etc_dir }}/.htpasswd"
- RequestHeader unset Authorization
- Require valid-user

lua_root: "{{ ood_base_dir }}/mod_ood_proxy/lib"
lua_log_level: info

httpd_loggers:
- "LogLevel lua_module:{{ lua_log_level }}"

# httpd_error_log: 'error.log'
# httpd_access_log: 'access.log'
# httpd_logformat:

user_map_cmd: "{{ ood_base_dir }}/ood_auth_map/bin/ood_auth_map.regex"
# user_env: REMOTE_USER
# map_fail_uri: /register

pun_stage_cmd: "sudo {{ ood_base_dir }}/nginx_stage/sbin/nginx_stage"

# node_uri: /node
# rnode_uri: /rnode
host_regex: '[^/]+'

pun_uri: "/pun"
pun_socket_root: "/var/run/ondemand-nginx"
pun_max_retries: 5

nginx_uri: /nginx
root_uri: "{{ pun_uri }}/sys/dashboard"

nginx_app_root:
  dev: "{{ ood_dev_app_dir }}/%{owner}/gateway/%{name}"
  usr: "{{ ood_usr_app_dir }}/%{owner}/gateway/%{name}"
  sys: "{{ ood_sys_app_dir }}/%{name}"


# analytics_url: "http://www.google-analytics.com/collect"
# analytics_id: "123-my-id"

httpd_public_uri: "/public"
httpd_public_root: "/var/www/ood/public"

logout_uri: "/logout"
logout_redirect: "/pun/sys/dashboard/logout"

# write the OIDC settings in the same file as the ood-portal configurations
# when using the ansible ood-portal.conf.j2 template
oidc_settings_samefile: false

# oidc_uri:
# oidc_discover_uri:
# oidc_discover_root:

# register_uri:
# register_root:

# # Apache for mod_auth_openidc, default undef
# ood_auth_openidc:
#   OIDCSessionMaxDuration: 28888
#   OIDCClientID: myid
#   OIDCProviderMetadataURL: https://localhost/
#   OIDCCryptoPassphrase: mycryptopass

# # ood-portal-generator oidc configurations
# oidc_provider_metadata_url: null
# oidc_client_id: null
# oidc_client_secret: null
# oidc_remote_user_claim: preferred_username
# oidc_scope: "openid profile email"
# oidc_session_inactivity_timeout: 28800
# oidc_session_max_duration: 28800
# oidc_state_max_number_of_cookies: "10 true"
# oidc_cookie_same_site: "On"
# oidc_settings: {}
# dex_settings: |
#   dex:
#     # Default based on if ssl key for ood-portal-generator is defined
#     ssl: false
#     # Only used if SSL is disabled
#     http_port: "5556"
#     # Only used if SSL is enabled
#     https_port: "5554"
#     # tls_cert and tls_key take OnDemand configured values for ssl and copy keys to /etc/ood/dex maintaining file names
#     tls_cert: null
#     tls_key: null
#     storage_file: /etc/ood/dex/dex.db
#     grpc: null
#     expiry: null
#     # Client ID, defaults to servername or FQDN
#     client_id: null
#     client_name: OnDemand
#     # Client secret, value auto generated
#     # A value that is a filesystem path can be used to store secret in a file
#     client_secret: /etc/ood/dex/ondemand.secret
#     # The OnDemand redirectURI is auto-generated, this option allows adding additional URIs
#     client_redirect_uris: []
#     # Additional Dex OIDC clients to configure
#     static_clients: []
#     # The following example is to configure OpenLDAP
#     # Docs: https://github.com/dexidp/dex/blob/master/Documentation/connectors/ldap.md
#     connectors:
#       - type: ldap
#         id: ldapg
#         name: LDAP
#         config:
#           host: openldap.my_center.edu:636
#           insecureSkipVerify: false
#           bindDN: cn=admin,dc=example,dc=org
#           bindPW: admin
#           userSearch:
#             baseDN: ou=People,dc=example,dc=org
#             filter: "(objectClass=posixAccount)"
#             username: uid
#             idAttr: uid
#             emailAttr: mail
#             nameAttr: gecos
#             preferredUsernameAttr: uid
#           groupSearch:
#             baseDN: ou=Groups,dc=example,dc=org
#             filter: "(objectClass=posixGroup)"
#             userMatchers:
#               - userAttr: DN
#                 groupAttr: member
#             nameAttr: cn
#     frontend:
#       theme: ondemand
#       dir: /usr/share/ondemand-dex/web

######## END Apache and ood_portal.yml configs ############
