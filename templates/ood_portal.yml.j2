# {{ ansible_managed }}
---
#
# Portal configuration
#

# The address and port to listen for connections on
# Example:
#     listen_addr_port: 443
# Default: null (don't add any more listen directives)
{% if listen_addr_port is defined %}listen_addr_port: {{ listen_addr_port }}
{% else %}#listen_addr_port: null
{% endif %}

# The server name used for name-based Virtual Host
# Example:
#     servername: 'www.example.com'
# Default: null (don't use name-based Virtual Host)
{% if servername is defined %}servername: {{ servername }}
{% else %}#servername: null
{% endif %}

# The server aliases used for the name-based Virtual Host
# Example:
#     server_aliases:
#       - foo.example.com
{% if server_aliases is defined and server_aliases|length > 0 %}
server_aliases:
{% for item in server_aliases  %}
  - '{{ item }}'
{% endfor %}
{% else %}
#server_aliases: []
{% endif %}

# The server name used for rewrites
# Example:
#     proxy_server: 'proxy.example.com'
# Default: The value of servername
{% if proxy_server is defined %}proxy_server: {{ proxy_server }}
{% else %}#proxy_server: null
{% endif %}

# The port specification for the Virtual Host
# Example:
#     port: 8080
#Default: null (use default port 80 or 443 if SSL enabled)
port: {{ httpd_port }}

# List of SSL Apache directives
# Example:
#     ssl:
#       - 'SSLCertificateFile "/etc/pki/tls/certs/www.example.com.crt"'
#       - 'SSLCertificateKeyFile "/etc/pki/tls/private/www.example.com.key"'
# Default: null (no SSL support)
{% if ssl is defined %}
ssl:
{% for item in ssl  %}
- '{{ item }}'
{% endfor %}
{% else %}
# Default: null (no SSL support)
{% endif %}

# Disable logging entirely. With this you can have custom log directives
# in a seperate configuration file.
# Example:
#     disable_logs: true
# Default: false (logs are enabled)
{% if disable_logs is defined %}disable_logs: {{ disable_logs | bool | lower }}
{% else %}#disable_logs: false
{% endif %}

# Root directory of log files (can be relative ServerRoot)
# Example:
#     logroot: '/path/to/my/logs'
# Default: 'logs' (this is relative to ServerRoot)
logroot: "{{ apache_log_dir }}"

# Error log filename
# Example:
#     errorlog: 'error.log'
# Default: 'error.log' (If 'servername' and 'ssl' options are defined 
# the default value will be <servername>_error_ssl.log)
{% if httpd_error_log is defined %}errorlog: '{{ httpd_error_log }}'
{% else %}#errorlog: 'error.log'
{% endif %}

# Access log filename
# Example:
#     accesslog: 'access.log'
# Default: 'access.log' (If 'servername' and 'ssl' options are defined 
# the default value will be <servername>_access_ssl.log)
{% if httpd_access_log is defined %}accesslog: '{{ httpd_access_log }}'
{% else %}#accesslog: 'access.log'
{% endif %}

# Apache access log format (Don't specify log nickname see: http://httpd.apache.org/docs/current/mod/mod_log_config.html#transferlog)
# Example:
#     logformat: '"%v %h \"%r\" %>s %O \"%{Referer}i\" \"%{User-Agent}i\" %{SSL_PROTOCOL}x %T"'
# Default: Apache combined format
{% if httpd_logformat is defined %}logformat: '{{ httpd_logformat }}'
{% endif %}

# Should RewriteEngine be used
# Example:
#     use_rewrites: false
# Default: true
use_rewrites: {{ httpd_use_rewrites | bool | lower }}

# Should Maintenance Rewrite rules be added
# Example:
#   use_maintenance: false
# Default: true
use_maintenance: {{ use_maintenance | bool | lower }}

# List of IPs to allow when maintenance is enabled
# Example:
#   maintenance_ip_allowlist:
#     - 192.168.0..*
#     - 192.168.1..*
# Default: [] (no IPs allowed)
{% if maintenance_ip_allowlist is defined and maintenance_ip_allowlist|length > 0 %}
maintenance_ip_allowlist:
{% for item in maintenance_ip_allowlist  %}
  - '{{ item }}'
{% endfor %}
{% elif maintenance_ip_whitelist is defined and maintenance_ip_whitelist|length > 0 %}
{% for item in maintenance_ip_whitelist  %}
  - '{{ item }}'
{% endfor %}
{% else %}
maintenance_ip_allowlist: []
{% endif %}

# Set Header Content-Security-Policy frame-ancestors.
# Example:
#   security_csp_frame_ancestors: https://ondemand.osc.edu
# Example to disable setting:
#   security_csp_frame_ancestors: false
# Default: based on servername and ssl settings
{% if security_csp_frame_ancestors is defined %}security_csp_frame_ancestors: {{ security_csp_frame_ancestors }}
{% else %}#security_csp_frame_ancestors:
{% endif %}

# Set Header Strict-Transport-Security to help enforce SSL
# Example:
#   security_strict_transport: false
# Default: true when ssl is enabled, false otherwise
{% if security_strict_transport is defined %}security_strict_transport: {{ security_strict_transport | bool }}
{% else %}#security_strict_transport: false
{% endif %}

# Root directory of the Lua handler code
# Example:
#     lua_root: '/path/to/lua/handlers'
# Default : '/opt/ood/mod_ood_proxy/lib' (default install directory of mod_ood_proxy)
lua_root: "{{ lua_root }}"

# Verbosity of the Lua module logging
# (see https://httpd.apache.org/docs/2.4/mod/core.html#loglevel)
# Example:
#     lua_log_level: 'warn'
# Default: 'info' (get verbose logs)
lua_log_level: "{{ lua_log_level }}"

# Lua regular expression used to map authenticated-user to system-user
# This configuration is ignored if user_map_cmd is defined
# Example:
#     user_map_match: '^([^@]+)@.*$'
# Default: '.*'
{% if user_map_match is defined %}user_map_match: '{{ user_map_match }}'
{% else %}# user_map_match: '.*'
{% endif %}

# System command used to map authenticated-user to system-user
# This option takes precedence over user_map_match
# Example:
#     user_map_cmd: '/usr/local/bin/ondemand-usermap'
# Default: null (use user_map_match)
{% if user_map_cmd is defined %}user_map_cmd: {{ user_map_cmd }}
{% else %}#user_map_cmd: null
{% endif %}

# Use an alternative CGI environment variable instead of REMOTE_USER for
# determining the authenticated-user fed to the mapping script
# Example:
#     user_env: 'OIDC_CLAIM_preferred_username'
# Default: null (use REMOTE_USER)
{% if user_env is defined %}user_env: {{ user_env }}
{% else %}#user_env: null
{% endif %}

# Redirect user to the following URI if fail to map there authenticated-user to
# a system-user
# Example:
#     map_fail_uri: '/register'
# Default: null (don't redirect, just display error message)
{% if map_fail_uri is defined %}map_fail_uri: {{ map_fail_uri }}
{% else %}#map_fail_uri: null
{% endif %}

# System command used to run the `nginx_stage` script with sudo privileges
# Example:
#     pun_stage_cmd: 'sudo /path/to/nginx_stage'
# Default: 'sudo /opt/ood/nginx_stage/sbin/nginx_stage' (don't forget sudo)
pun_stage_cmd: "{{ pun_stage_cmd }}"

# List of Apache authentication directives
# NB: Be sure the appropriate Apache module is installed for this
# Default: (see below, uses OIDC auth with Dex)
#auth:
#  - 'AuthType openid-connect'
#  - 'Require valid-user'
auth:
{% for auth in httpd_auth  %}
- '{{ auth }}'
{% endfor %}

# List of custom apache directives to apply to the entire vhost.
# Note this is an array of strings.
# Example:
#     custom_vhost_directives:
#       - 'SetEnv SPECIAL_ENV_VAR custom'
# Default: [] (no custom directives)
{% if custom_vhost_directives is defined %}
custom_vhost_directives:
{% for directive in custom_vhost_directives  %}
- '{{ directive }}'
{% endfor %}
{% else %}
#custom_vhost_directives: []
{% endif %}

# List of custom apache directives to apply to the Locations.
# Note this is an array of strings.
# Example:
#     custom_location_directives:
#       - 'SetEnv SPECIAL_ENV_VAR custom'
# Default: [] (no custom directives)
{% if custom_location_directives is defined %}
custom_location_directives:
{% for directive in custom_location_directives  %}
- '{{ directive }}'
{% endfor %}
{% else %}
#custom_location_directives: []
{% endif %}

# Redirect user to the following URI when accessing root URI
# Example:
#     root_uri: '/my_uri'
#     # https://www.example.com/ => https://www.example.com/my_uri
# Default: '/pun/sys/dashboard' (default location of the OOD Dashboard app)
root_uri: {{ root_uri }}

# Track server-side analytics with a Google Analytics account and property
# (see https://github.com/OSC/mod_ood_proxy/blob/master/lib/analytics.lua for
# information on how to setup the GA property)
# Example:
#     analytics:
#       url: 'http://www.google-analytics.com/collect'
#       id: 'UA-79331310-4'
# Default: null (do not track)
{% if analytics_url is defined and analytics_id is defined %}
analytics:
  url: "{{ analytics_url }}"
  id: "{{ analytics_id }}"
{% else %}
#analytics: null
{% endif %}

#
# Publicly available assets
#

# Public sub-uri (available to public with no authentication)
# Example:
#     public_uri: '/assets'
# Default: '/public'
public_uri: "{{ httpd_public_uri }}"

# Root directory that serves the public sub-uri (be careful, everything under
# here is open to the public)
# Example:
#     public_root: '/path/to/public/assets'
# Default: '/var/www/ood/public'
public_root: "{{ httpd_public_root }}"

#
# Logout redirect helper
#

# Logout sub-uri
# Example
#     logout_uri: '/log_me_out'
# NB: If you change this, then modify the Dashboard app with the new sub-uri
# Default: '/logout' (the Dashboard app is by default going to expect this)
logout_uri: "{{ logout_uri }}"

# Redirect user to the following URI when accessing logout URI
# Example:
#     logout_redirect: '/oidc?logout=https%3A%2F%2Fwww.example.com'
# Default: '/pun/sys/dashboard/logout' (the Dashboard app provides a simple
# HTML page explaining logout to the user)
logout_redirect: "{{ logout_redirect }}"

#
# Reverse proxy to backend nodes
#

# Regular expression used for whitelisting allowed hostnames of nodes
# Example:
#     host_regex: '[\w.-]+\.example\.com'
# Default: '[^/]+' (allow reverse proxying to all hosts, this allows external
# hosts as well)
host_regex: '{{ host_regex }}'

# Sub-uri used to reverse proxy to backend web server running on node that
# knows the full URI path
# Example:
#     node_uri: '/node'
# Default: null (disable this feature)
{% if node_uri is defined %}node_uri: {{ node_uri }}
{% else %}#node_uri: null
{% endif %}

# Sub-uri used to reverse proxy to backend web server running on node that
# ONLY uses *relative* URI paths
# Example:
#     rnode_uri: '/rnode'
# Default: null (disable this feature)
{% if rnode_uri is defined %}rnode_uri: {{ rnode_uri }}
{% else %}#rnode_uri: null
{% endif %}

#
# Per-user NGINX Passenger apps
#

# Sub-uri used to control PUN processes
# Example:
#     nginx_uri: '/my_pun_controller'
# Default: '/nginx'
nginx_uri: {{ nginx_uri }}

# Sub-uri used to access the PUN processes
# Example:
#     pun_uri: '/my_pun_apps'
# Default: '/pun'
pun_uri: "{{ pun_uri }}"

# Root directory that contains the PUN Unix sockets that the proxy uses to
# connect to
# Example:
#     pun_socket_root: '/path/to/pun/sockets'
# Default: '/var/run/ondemand-nginx' (default location set in nginx_stage)
pun_socket_root: "{{ pun_socket_root }}"

# Number of times the proxy attempts to connect to the PUN Unix socket before
# giving up and displaying an error to the user
# Example:
#     pun_max_retries: 25
# Default: 5 (only try 5 times)
pun_max_retries: {{ pun_max_retries }}

# The PUN pre hook command to execute as root
#
# Example:
#    pun_pre_hook_root_cmd: '/opt/hpc-site/ood_pun_prehook'
# Default: null (do not run any PUN pre hook as root)
{% if pun_pre_hook_root_cmd is defined %}pun_pre_hook_root_cmd: '{{ pun_pre_hook_root_cmd }}'
{% else %}# pun_pre_hook_root_cmd: null
{% endif %}

# Comma separated list of environment variables to pass from the apache context
# into the PUN pre hook. Defaults to null so nothing is exported.
#
# Example:
#    pun_pre_hook_exports: 'OIDC_ACCESS_TOKEN,OIDC_CLAIM_EMAIL'
# Default: null (pass nothing)
{% if pun_pre_hook_exports is defined %}pun_pre_hook_exports: '{{ pun_pre_hook_exports }}'
{% else %}# pun_pre_hook_exports: null
{% endif %}

#
# Support for OpenID Connect
#

# Sub-uri used by mod_auth_openidc for authentication
# Example:
#     oidc_uri: '/oidc'
# Default: null (disable OpenID Connect support)
{% if oidc_uri is defined %}oidc_uri: {{ oidc_uri }}
{% else %}#oidc_uri: null
{% endif %}

# Sub-uri user is redirected to if they are not authenticated. This is used to
# *discover* what ID provider the user will login through.
# Example:
#     oidc_discover_uri: '/discover'
# Default: null (disable support for discovering OpenID Connect IdP)
{% if oidc_discover_uri is defined %}oidc_discover_uri: {{ oidc_discover_uri }}
{% else %}#oidc_discover_uri: null
{% endif %}

# Root directory on the filesystem that serves the HTML code used to display
# the discovery page
# Example:
#     oidc_discover_root: '/var/www/ood/discover'
# Default: null (disable support for discovering OpenID Connect IdP)
{% if oidc_discover_root is defined %}oidc_discover_root: {{ oidc_discover_root }}
{% else %}#oidc_discover_root: null
{% endif %}

#
# Support for registering unmapped users
#
# (Not necessary if using regular expressions for mapping users)
#

# Sub-uri user is redirected to if unable to map authenticated-user to
# system-user
# Example:
#     register_uri: '/register'
# Default: null (display error to user if mapping fails)
{% if register_uri is defined %}register_uri: {{ register_uri }}
{% else %}#register_uri: null
{% endif %}

# Root directory on the filesystem that serves the HTML code used to register
# an unmapped user
# Example:
#     register_root: '/var/www/ood/register'
# Default: null (display error to user if mapping fails)
{% if register_root is defined %}register_root: {{ register_root }}
{% else %}#register_root: null
{% endif %}

# OIDC metadata URL
# Example:
#     oidc_provider_metadata_url: https://example.com:5554/.well-known/openid-configuration
# Default: null (value auto-generated if using Dex)
{% if oidc_provider_metadata_url is defined %}oidc_provider_metadata_url: {{ oidc_provider_metadata_url }}
{% else %}#oidc_provider_metadata_url: null
{% endif %}

# OIDC client ID
# Example:
#     oidc_client_id: ondemand.example.com
# Default: null (value auto-generated if using Dex)
{% if oidc_client_id is defined %}oidc_client_id: {{ oidc_client_id }}
{% else %}#oidc_client_id: null
{% endif %}

# OIDC client secret
# Example:
#     oidc_client_secret: 334389048b872a533002b34d73f8c29fd09efc50
# Default: null (value auto-generated if using Dex)
{% if oidc_client_secret is defined %}oidc_client_secret: {{ oidc_client_secret }}
{% else %}#oidc_client_secret: null
{% endif %}

# OIDC remote user claim. This is the claim that populates REMOTE_USER
# Example:
#     oidc_remote_user_claim: preferred_username
# Default: preferred_username
{% if oidc_remote_user_claim is defined %}oidc_remote_user_claim: {{ oidc_remote_user_claim }}
{% else %}#oidc_remote_user_claim: preferred_username
{% endif %}

# OIDC scopes
# Example:
#     oidc_scope: "openid profile email groups"
# Default: "openid profile email"
{% if oidc_scope is defined %}oidc_scope: "{{ oidc_scope }}"
{% else %}#oidc_scope: "openid profile email"
{% endif %}

# OIDC session inactivity timeout
# Example:
#     oidc_session_inactivity_timeout: 28800
# Default: 28800
{% if oidc_session_inactivity_timeout is defined %}oidc_session_inactivity_timeout: {{ oidc_session_inactivity_timeout }}
{% else %}#oidc_session_inactivity_timeout: 28800
{% endif %}

# OIDC session max duration
# Example:
#     oidc_session_max_duration: 28800
# Default: 28800
{% if oidc_session_max_duration is defined %}oidc_session_max_duration: {{ oidc_session_max_duration }}
{% else %}#oidc_session_max_duration: 28800
{% endif %}

# OIDC max number of state cookies and if to automatically clean old cookies
# Example:
#     oidc_state_max_number_of_cookies: "10 true"
# Default: "10 true"
{% if oidc_state_max_number_of_cookies is defined %}oidc_state_max_number_of_cookies: {{ oidc_state_max_number_of_cookies }}
{% else %}#oidc_state_max_number_of_cookies: "10 true"
{% endif %}

# OIDC Enable SameSite cookie
# When ssl is defined this defaults to 'Off'
# When ssl is not defined this defaults to 'On'
# Example:
#     oidc_cookie_same_site: 'Off'
# Default: 'On'
{% if oidc_cookie_same_site is defined %}oidc_cookie_same_site: "{{ oidc_cookie_same_site }}"
{% else %}#oidc_cookie_same_site: "On"
{% endif %}

# Additional OIDC settings as key-value pairs
# Example:
#     oidc_settings:
#       OIDCPassIDTokenAs: serialized
#       OIDCPassRefreshToken: On
# Default: {} (empty hash)
{% if oidc_settings is defined %}
oidc_settings:
{% for key, value in oidc_settings.items() %}
  {{ key }}: '{{ value }}'
{% endfor %}
{% endif %}

# The Dex URI behind Apache reverse proxy
# Setting this value to some path will result in Dex listening on localhost
# as well as only using HTTP for proxied communication
# Example:
#   dex_uri: /dex
# Default: null
{% if dex_uri is defined %}dex_uri: '{{ dex_uri }}'
{% else %}#dex_uri: null
{% endif %}

# Dex configurations, values inside the "dex" structure are directly used to configure Dex
# If the value for "dex" key is false or null, Dex support is disabled
# Dex support will auto-enable if ondemand-dex package is installed
{% if dex_settings is defined %}
{{ dex_settings }}
{% else %}
#dex:
  # Default based on if ssl key for ood-portal-generator is defined
#  ssl: false
  # Only used if SSL is disabled
#  http_port: "5556"
  # Only used if SSL is enabled
#  https_port: "5554"
  # tls_cert and tls_key take OnDemand configured values for ssl and copy keys to /etc/ood/dex maintaining file names
#  tls_cert: null
#  tls_key: null
#  storage_file: /etc/ood/dex/dex.db
#  grpc: null
#  expiry: null
  # Client ID, defaults to servername or FQDN
#  client_id: null
#  client_name: OnDemand
  # Client secret, value auto generated
  # A value that is a filesystem path can be used to store secret in a file
#  client_secret: /etc/ood/dex/ondemand.secret
   # The OnDemand redirectURI is auto-generated, this option allows adding additional URIs
#  client_redirect_uris: []
  # Additional Dex OIDC clients to configure
#  static_clients: []
  # The following example is to configure OpenLDAP
  # Docs: https://github.com/dexidp/dex/blob/master/Documentation/connectors/ldap.md
#  connectors:
#    - type: ldap
#      id: ldap
#      name: LDAP
#      config:
#        host: openldap.my_center.edu:636
#        insecureSkipVerify: false
#        bindDN: cn=admin,dc=example,dc=org
#        bindPW: admin
#        userSearch:
#          baseDN: ou=People,dc=example,dc=org
#          filter: "(objectClass=posixAccount)"
#          username: uid
#          idAttr: uid
#          emailAttr: mail
#          nameAttr: gecos
#          preferredUsernameAttr: uid
#        groupSearch:
#          baseDN: ou=Groups,dc=example,dc=org
#          filter: "(objectClass=posixGroup)"
#          userMatchers:
#            - userAttr: DN
#              groupAttr: member
#          nameAttr: cn
#  frontend:
#    theme: ondemand
#    dir: /usr/share/ondemand-dex/web
{% endif %}
